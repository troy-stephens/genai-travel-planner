
@page "/chat"
@using ui_frontend.Service;
@inject ChatService chatService;


<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mx-auto my-5">
    <MudGrid Justify="Justify.Center" Class="main-grid">
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="12">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudAvatar Size="Size.Large">
                        <MudImage Src="images/businessman-hand-touchsample.jpg"></MudImage>
                    </MudAvatar>
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.body1">Fence360 AI Chat Bot</MudText>
                        <MudText Typo="Typo.body2">Ask questions about the business and get answers</MudText>
                    </MudStack>
                    <div style="margin-left:auto">
                        <MudSelect Style="width: 300px;" Class="et-select-input align-right" T="string" @bind-Value="SelectedCategory" Label="Select Category" >
                            <MudSelectItem Value="@("Administration")" />
                            <MudSelectItem Value="@("Sales")" />
                            <MudSelectItem Value="@("Field Tech")" />
                        </MudSelect>
                    </div>
                </MudStack>
            </MudPaper>
        </MudItem>
        <!-- Bottom: AI Response and User Prompt -->
        <MudItem xs="12">
            <ChatNew />
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private bool _isVisible = false;
    private string? selectedCategory;
    public string? SelectedCategory
    {
        get => selectedCategory;
        set
        {
            selectedCategory = value;
        }
    }

    private void ToggleVisibility()
    {
        _isVisible = !_isVisible;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Not using this code yet
            await Task.Delay(1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error do blah: {ex.Message}");
            // Handle or log the exception as needed
        }
    }

}
