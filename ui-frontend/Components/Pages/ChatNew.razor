@using System.Collections.Generic
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Headers;
@using System.Text;
@using System.Text.Json;
@using ui_frontend.Components;
@using ui_frontend.Service;
@using ui_frontend.Utils.Helpers;
@using ui_frontend.Models;

@inject ChatService chatService
@inject IJSRuntime JSRuntime;
@rendermode InteractiveServer

<style>
    .clearChatBroom {
        box-sizing: border-box;
        margin-top: 55px;
        padding: 8px;
        width: 40px;
        height: 40px;
        left: 12px;
        top: 66px;
        color: #FFFFFF;
        border: 1px solid #D1D1D1;
        border-radius: 20px;
        z-index: 1;
    }

    .text-with-new-lines {
        white-space: pre-wrap;
    }

    div.scroll {
        margin: 20px;
        padding: 4px;
        width: auto;
        height: 60vh;
        overflow-x: auto;
        overflow-y: auto;
        white-space: nowrap;
    }

    /*
        class="ma-20"
    style="margin:20px;height:60vh;overflow-y:auto;overflow-x:auto;" */

</style>
<MudStack>
    <MudProgressLinear Color="Color.Primary" @ref="progressBar" Hidden="@(progressHidden)" Indeterminate="true" Class="my-7" />
    <MudPaper Elevation="12" Class="pa-4" >
        <MudStack Justify="Justify.FlexEnd" Spacing="4">
            <MudText Typo="Typo.h5">Results</MudText>
            <MudDivider Class="pa-4" />
        </MudStack>
        <div id="another_unique_identifier" class="scroll">     
                <MudStack Spacing="4">  
                    @if (qaList.Count > 0)
                    {
                        @foreach (var item in qaList)
                        {
                            var chatQuestion = item.Question;
                            var aiResponse = item.Answer;
                            var citations = item.Citations;
                            <UserQuestionComp StatusText="@chatQuestion" />
                            if (item.AnswerHidden == false)
                            {
                                <AIResponseComp StatusText="@aiResponse" CitationList="@citations" />
                            }
                        }
                    }
                </MudStack>
        </div>
    </MudPaper>
    <MudPaper Elevation="12" Class="pa-4" Style="height:vh">
        <MudStack Row="true" Style="background: #FFFFFF;">
            <MudSpacer />
            <div role="button" tabindex="0" aria-label="Clear session" @onclick="ClearChat">
                <svg class="clearChatBroom" aria-hidden="true" fill="currentColor" width="1em" height="1em" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" style="@(qaList.Count > 0 ? "background: radial-gradient(109.81% 107.82% at 100.1% 90.19%, #0F6CBD 33.63%, #2D87C3 70.31%, #8DDDD8 100%);" : "background: rgb(189, 189, 189);")">
                    <path d="M17.91 2.18c.2.2.2.51 0 .7l-5.32 5.33a4.5 4.5 0 0 1-.34 6l-.66.66-2.09 3.48a.5.5 0 0 1-.78.1l-7.07-7.08a.5.5 0 0 1 .1-.78L5.22 8.5l.66-.66a4.5 4.5 0 0 1 5.99-.34l5.32-5.32c.2-.2.51-.2.71 0ZM6.24 8.9l4.95 4.95.36-.35A3.5 3.5 0 1 0 6.6 8.55l-.36.35Zm-.78.63L2.8 11.12l6.16 6.17 1.6-2.66-5.11-5.1Z" fill="currentColor"></path>
                </svg>
            </div>
            <MudTextField @bind-Value="value" OnKeyDown="OnKeyDown" Label="Type a new question" Lines="3" TextUpdateSuppression="false" Style="background: #FFFFFF;" Variant="Variant.Outlined" OnAdornmentClick="AdornmentOnClick" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" />
            <MudSpacer />
        </MudStack>
    </MudPaper>

</MudStack>


@code {
    private bool progressHidden = true;
    private MudProgressLinear? progressBar;
    string? value;
    private List<QuestionAnswer> qaList = new List<QuestionAnswer>();
    private SessionInfo sessionInfo = new SessionInfo();
    private List<Citation> citationList = new List<Citation>();

    private bool _open = true;

    private async Task ToggleDrawer()
    {
        _open = !_open;
        var test = await JSRuntime.InvokeAsync<object>("open", "./pdfviewer", "_blank");
    }

    private async Task ClearChat()
    {
        await Task.Delay(100);
        qaList.Clear();
        StateHasChanged();
    }

    private async Task AdornmentOnClick()
    {
        if (!string.IsNullOrWhiteSpace(value))
        {
            try
            {
                progressHidden = false;
                var newCitationList = new List<Citation>();
                var newQA = new QuestionAnswer(value, "");
                qaList.Add(newQA);
                int newIndex = qaList.IndexOf(newQA);
                sessionInfo.SessionId = "12345";
                sessionInfo.UserId = "steve@fence360.com";
                sessionInfo.Prompt = value;
                qaList[newIndex].AnswerHidden = true;
                var response = await chatService.GetAiResponseAsync(value, sessionInfo);
                qaList[newIndex].Answer += response.Content;
                qaList[newIndex].AnswerHidden = false;
                if (response.Citations != null)
                {
                    foreach (var citation in response.Citations)
                    {
                        //newCitationList.
                        Citation newCitation = new Citation
                            {
                                Content = citation.Content,
                                Title = citation.Title,
                                FilePath = citation.FilePath
                            };
                        // qaList[newIndex].Citations.Add(citation);
                        qaList[newIndex].AddCitation(newCitation);
                    }
                }
                // need to add the logic for citations as well.

                // rfpclient.ChatStreamAsync must be implemented usinbg IAsyncEnumerable in order for the streaming to work properly
                // await foreach (var line in rfpclient.ChatStreamAsync(value))
                // {
                //     qaList[newIndex].Answer += line;
                //     await InvokeAsync(() => StateHasChanged());
                // }
                progressHidden = true;
                value = string.Empty;    
            }
            catch (Exception ex)
            {
                // Handle or log the error that occurred during the ChatStreamAsync or streaming process
                Console.WriteLine($"Error during streaming: {ex.Message}");
            }
            finally
            {
               StateHasChanged();
            }
        }
    }

    // Could implement this for the chat question area if you want special handling for specific keys
    private async Task OnKeyDown(KeyboardEventArgs args)
    {
        // if (args.Key == "Enter" && !string.IsNullOrWhiteSpace(value))
        // {
        //     chatHistory.Add(value);
        //     aiResponse.Add(Constants.SampleAIResponse); // Add a fake AI response for testing the UI
        //     value = string.Empty;
        //     StateHasChanged();
        // }
        await Task.Delay(1);
    }

}
